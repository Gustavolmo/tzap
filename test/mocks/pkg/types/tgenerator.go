// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/types/tgenerator.go

// Package mock_types is a generated GoMock package.
package mock_types

import (
	context "context"
	reflect "reflect"

	types "github.com/tzapio/tzap/pkg/types"
	gomock "go.uber.org/mock/gomock"
)

// MockTGenerator is a mock of TGenerator interface.
type MockTGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockTGeneratorMockRecorder
}

// MockTGeneratorMockRecorder is the mock recorder for MockTGenerator.
type MockTGeneratorMockRecorder struct {
	mock *MockTGenerator
}

// NewMockTGenerator creates a new mock instance.
func NewMockTGenerator(ctrl *gomock.Controller) *MockTGenerator {
	mock := &MockTGenerator{ctrl: ctrl}
	mock.recorder = &MockTGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTGenerator) EXPECT() *MockTGeneratorMockRecorder {
	return m.recorder
}

// AddEmbeddingDocument mocks base method.
func (m *MockTGenerator) AddEmbeddingDocument(ctx context.Context, id string, embedding [1536]float32, metadata types.Metadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEmbeddingDocument", ctx, id, embedding, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEmbeddingDocument indicates an expected call of AddEmbeddingDocument.
func (mr *MockTGeneratorMockRecorder) AddEmbeddingDocument(ctx, id, embedding, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEmbeddingDocument", reflect.TypeOf((*MockTGenerator)(nil).AddEmbeddingDocument), ctx, id, embedding, metadata)
}

// CountTokens mocks base method.
func (m *MockTGenerator) CountTokens(ctx context.Context, content string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTokens", ctx, content)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTokens indicates an expected call of CountTokens.
func (mr *MockTGeneratorMockRecorder) CountTokens(ctx, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTokens", reflect.TypeOf((*MockTGenerator)(nil).CountTokens), ctx, content)
}

// DeleteEmbeddingDocument mocks base method.
func (m *MockTGenerator) DeleteEmbeddingDocument(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmbeddingDocument", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmbeddingDocument indicates an expected call of DeleteEmbeddingDocument.
func (mr *MockTGeneratorMockRecorder) DeleteEmbeddingDocument(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmbeddingDocument", reflect.TypeOf((*MockTGenerator)(nil).DeleteEmbeddingDocument), ctx, id)
}

// DeleteEmbeddingDocuments mocks base method.
func (m *MockTGenerator) DeleteEmbeddingDocuments(ctx context.Context, ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmbeddingDocuments", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmbeddingDocuments indicates an expected call of DeleteEmbeddingDocuments.
func (mr *MockTGeneratorMockRecorder) DeleteEmbeddingDocuments(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmbeddingDocuments", reflect.TypeOf((*MockTGenerator)(nil).DeleteEmbeddingDocuments), ctx, ids)
}

// FetchEmbedding mocks base method.
func (m *MockTGenerator) FetchEmbedding(ctx context.Context, content ...string) ([][1536]float32, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range content {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchEmbedding", varargs...)
	ret0, _ := ret[0].([][1536]float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchEmbedding indicates an expected call of FetchEmbedding.
func (mr *MockTGeneratorMockRecorder) FetchEmbedding(ctx interface{}, content ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, content...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchEmbedding", reflect.TypeOf((*MockTGenerator)(nil).FetchEmbedding), varargs...)
}

// GenerateChat mocks base method.
func (m *MockTGenerator) GenerateChat(ctx context.Context, messages []types.Message, stream bool, functions string) (types.CompletionMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateChat", ctx, messages, stream, functions)
	ret0, _ := ret[0].(types.CompletionMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateChat indicates an expected call of GenerateChat.
func (mr *MockTGeneratorMockRecorder) GenerateChat(ctx, messages, stream, functions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateChat", reflect.TypeOf((*MockTGenerator)(nil).GenerateChat), ctx, messages, stream, functions)
}

// GetEmbeddingDocument mocks base method.
func (m *MockTGenerator) GetEmbeddingDocument(ctx context.Context, id string) (types.Vector, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmbeddingDocument", ctx, id)
	ret0, _ := ret[0].(types.Vector)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEmbeddingDocument indicates an expected call of GetEmbeddingDocument.
func (mr *MockTGeneratorMockRecorder) GetEmbeddingDocument(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmbeddingDocument", reflect.TypeOf((*MockTGenerator)(nil).GetEmbeddingDocument), ctx, id)
}

// ListAllEmbeddingsIds mocks base method.
func (m *MockTGenerator) ListAllEmbeddingsIds(ctx context.Context) (types.SearchResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllEmbeddingsIds", ctx)
	ret0, _ := ret[0].(types.SearchResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllEmbeddingsIds indicates an expected call of ListAllEmbeddingsIds.
func (mr *MockTGeneratorMockRecorder) ListAllEmbeddingsIds(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllEmbeddingsIds", reflect.TypeOf((*MockTGenerator)(nil).ListAllEmbeddingsIds), ctx)
}

// OffsetTokens mocks base method.
func (m *MockTGenerator) OffsetTokens(ctx context.Context, content string, from, to int) (string, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OffsetTokens", ctx, content, from, to)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// OffsetTokens indicates an expected call of OffsetTokens.
func (mr *MockTGeneratorMockRecorder) OffsetTokens(ctx, content, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OffsetTokens", reflect.TypeOf((*MockTGenerator)(nil).OffsetTokens), ctx, content, from, to)
}

// RawTokens mocks base method.
func (m *MockTGenerator) RawTokens(ctx context.Context, content string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawTokens", ctx, content)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawTokens indicates an expected call of RawTokens.
func (mr *MockTGeneratorMockRecorder) RawTokens(ctx, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawTokens", reflect.TypeOf((*MockTGenerator)(nil).RawTokens), ctx, content)
}

// SearchWithEmbedding mocks base method.
func (m *MockTGenerator) SearchWithEmbedding(ctx context.Context, embedding types.QueryFilter, k int) (types.SearchResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchWithEmbedding", ctx, embedding, k)
	ret0, _ := ret[0].(types.SearchResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchWithEmbedding indicates an expected call of SearchWithEmbedding.
func (mr *MockTGeneratorMockRecorder) SearchWithEmbedding(ctx, embedding, k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchWithEmbedding", reflect.TypeOf((*MockTGenerator)(nil).SearchWithEmbedding), ctx, embedding, k)
}

// SpeechToText mocks base method.
func (m *MockTGenerator) SpeechToText(ctx context.Context, audioContent *[]byte, language string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpeechToText", ctx, audioContent, language)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpeechToText indicates an expected call of SpeechToText.
func (mr *MockTGeneratorMockRecorder) SpeechToText(ctx, audioContent, language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpeechToText", reflect.TypeOf((*MockTGenerator)(nil).SpeechToText), ctx, audioContent, language)
}

// TextToSpeech mocks base method.
func (m *MockTGenerator) TextToSpeech(ctx context.Context, content, language, voice string) (*[]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TextToSpeech", ctx, content, language, voice)
	ret0, _ := ret[0].(*[]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TextToSpeech indicates an expected call of TextToSpeech.
func (mr *MockTGeneratorMockRecorder) TextToSpeech(ctx, content, language, voice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TextToSpeech", reflect.TypeOf((*MockTGenerator)(nil).TextToSpeech), ctx, content, language, voice)
}
